{
  "version": 3,
  "sources": ["../src/core/values.ts", "../src/core/render.ts", "../src/core/noop.ts", "../src/core/easy.ts", "../src/main.ts"],
  "sourcesContent": ["export function concatValues(\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n) {\n  return strings.map((str, i) => str + (values[i] ?? '')).join('');\n}\n", "import { concatValues } from './values'\n\nexport function css(strings: TemplateStringsArray, ...values: unknown[]) {\n  const style = document.createElement('style')\n  style.textContent = concatValues(strings, values)\n  return style\n}\n\nexport function html(strings: TemplateStringsArray, ...values: unknown[]) {\n  const template = document.createElement('template')\n  template.innerHTML = concatValues(strings, values)\n  return template\n}\n\nexport abstract class EasyRenderElement extends HTMLElement {\n  render(params: any) { }\n}\n", "export const noop = () => null;", "import { noop } from './noop'\n\nexport type EasyOptions<T> = {\n  name: string\n  html?: (params: T) => HTMLTemplateElement\n  style?: HTMLStyleElement\n} & ShadowRootInit\n\nexport function Easy<T>(options: EasyOptions<T>) {\n  const { name, html, style, mode } = options\n  return function <T extends CustomElementConstructor>(target: T) {\n    const connected = target.prototype.connectedCallback ?? noop\n\n    target.prototype.connectedCallback = function () {\n      const shadow: ShadowRoot = this.attachShadow({ mode })\n      if (style) shadow.appendChild(style)\n\n      target.prototype.render = (params: any) => {\n        if (html) {\n          shadow.innerHTML = ''\n          const { content } = html(params)\n          const template = content.cloneNode(true)\n          shadow.appendChild(template)\n        }\n      }\n\n      if (html) {\n        const { content } = html(this)\n        const template = content.cloneNode(true)\n        shadow.appendChild(template)\n      }\n\n      connected.call(this)\n    }\n\n    customElements.define(name, target)\n  }\n}\n", "import { EasyRenderElement, html } from './core/render'\nimport { Easy } from './core/easy'\n\nimport './style.css'\n\n@Easy<MyEasyElement>({\n  mode: 'open',\n  name: 'easy-element',\n  html: ({ name }) => html` <h1>${name}</h1> `,\n})\nexport class MyEasyElement extends EasyRenderElement {\n  name = 'Um'\n  connectedCallback() {\n    this.name = 'Dois'\n    setTimeout(() => this.render(this), 2000)\n  }\n}\n\nconst easyElement = document.querySelector('easy-element')\n"],
  "mappings": ";;;;;;;;;;;;;;AAAO,wBACL,YACG,QACH;AACA,WAAO,QAAQ,IAAI,CAAC,KAAK,MAAM,MAAO,QAAO,MAAM,KAAK,KAAK;AAAA;;;ACIxD,gBAAc,YAAkC,QAAmB;AACxE,UAAM,WAAW,SAAS,cAAc;AACxC,aAAS,YAAY,aAAa,SAAS;AAC3C,WAAO;AAAA;AAGF,wCAAyC,YAAY;AAAA,IAC1D,OAAO,QAAa;AAAA;AAAA;;;ACff,MAAM,OAAO,MAAM;;;ACQnB,gBAAiB,SAAyB;AAC/C,UAAM,CAAE,MAAM,aAAM,OAAO,QAAS;AACpC,WAAO,SAA8C,QAAW;AAC9D,YAAM,YAAY,OAAO,UAAU,qBAAqB;AAExD,aAAO,UAAU,oBAAoB,WAAY;AAC/C,cAAM,SAAqB,KAAK,aAAa,CAAE;AAC/C,YAAI;AAAO,iBAAO,YAAY;AAE9B,eAAO,UAAU,SAAS,CAAC,WAAgB;AACzC,cAAI,OAAM;AACR,mBAAO,YAAY;AACnB,kBAAM,CAAE,WAAY,MAAK;AACzB,kBAAM,WAAW,QAAQ,UAAU;AACnC,mBAAO,YAAY;AAAA;AAAA;AAIvB,YAAI,OAAM;AACR,gBAAM,CAAE,WAAY,MAAK;AACzB,gBAAM,WAAW,QAAQ,UAAU;AACnC,iBAAO,YAAY;AAAA;AAGrB,kBAAU,KAAK;AAAA;AAGjB,qBAAe,OAAO,MAAM;AAAA;AAAA;;;ACzBzB,oCAA4B,kBAAkB;AAAA,IAA9C,cAVP;AAUO;AACL,kBAAO;AAAA;AAAA,IACP,oBAAoB;AAClB,WAAK,OAAO;AACZ,iBAAW,MAAM,KAAK,OAAO,OAAO;AAAA;AAAA;AAJjC;AAAA,IALN,KAAoB;AAAA,MACnB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC,CAAE,UAAW,YAAY;AAAA;AAAA,KAE3B;AAQP,MAAM,cAAc,SAAS,cAAc;",
  "names": []
}
